version: 2

workflows:
  version: 2
  untagged-build:
    jobs:
      - build-docker-npm
  build-n-test:
    jobs:
      - build


jobs:
  build:
    parallelism: 1
    docker:
      - image: circleci/node:7
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM packages
          command: npm install
      - run:
          name: build project
          command: npm run build:dev
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: run tests
          command: |
            npm run test:common
            npm run test:client
            npm run test:server

  build-docker-npm:
    docker:
      - image: circleci/node:6.12.3
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: check localbuild
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "This is a local build. Enabling sudo for docker"
              echo sudo > ~/sudo
            else
              echo "This is not a local build. Disabling sudo for docker"
              touch ~/sudo
            fi
      - restore_cache:
          key: turnilo-
      - run:
          name: Docker load if exists
          command: |
            if [ -f caches/turnilo.tgz ]; then
              zcat caches/turnilo.tgz | eval `cat ~/sudo` docker load
            fi
      - run:
          name: Build application Docker image
          command: |
            CIRCLE_TAG=${CIRCLE_TAG:=$(git describe --tags --always)}
            echo "applying tag ${CIRCLE_TAG}"
            eval `cat ~/sudo` docker build -t ${IMAGE_NAME}:${CIRCLE_TAG} \
              -t gcr.io/${GCP_PROJECT}/${IMAGE_NAME}:${CIRCLE_TAG} -f docker/Dockerfile .
            mkdir -p caches
      - run:
          name: Save docker images and histories
          command: |
            case $CIRCLE_SHELL_ENV in
              *localbuild*) : ;;
              *) # only for non localbuilds 
                docker_images=$(eval `cat ~/sudo` docker images --filter 'dangling=false' \
                  --format '{{.Repository}}:{{.Tag}}')
                docker_histories=$(for i in ${docker_images}; \
                  do eval `cat ~/sudo` docker history -q $i | grep -v missing; \
                  done)
                eval `cat ~/sudo` docker save ${docker_images} ${docker_histories} \
                  | gzip > caches/turnilo.tgz
                ;;
            esac
      - save_cache:
          key: turnilo-{{ checksum "caches/turnilo.tgz" }}
          paths:
            - caches/turnilo.tgz
      - persist_to_workspace:
          root: caches
          paths:
            - turnilo.tgz
